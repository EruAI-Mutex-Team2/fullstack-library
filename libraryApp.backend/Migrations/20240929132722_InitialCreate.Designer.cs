// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using libraryApp.backend.Entity;

#nullable disable

namespace libraryApp.backend.Migrations
{
    [DbContext(typeof(libraryDBContext))]
    [Migration("20240929132722_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("libraryApp.backend.Entity.ceza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CezaAktifMi")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CezaBitisGunu")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CezaGunu")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("cezalar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CezaAktifMi = false,
                            CezaBitisGunu = new DateTime(2024, 9, 9, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8169),
                            CezaGunu = new DateTime(2024, 8, 30, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8160),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CezaAktifMi = false,
                            CezaBitisGunu = new DateTime(2024, 8, 10, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8173),
                            CezaGunu = new DateTime(2024, 7, 31, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8171),
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            CezaAktifMi = false,
                            CezaBitisGunu = new DateTime(2024, 7, 11, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8176),
                            CezaGunu = new DateTime(2024, 7, 1, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8175),
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            CezaAktifMi = false,
                            CezaBitisGunu = new DateTime(2024, 6, 11, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8179),
                            CezaGunu = new DateTime(2024, 6, 1, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8178),
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            CezaAktifMi = true,
                            CezaBitisGunu = new DateTime(2024, 5, 12, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8182),
                            CezaGunu = new DateTime(2024, 5, 2, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8181),
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            CezaAktifMi = false,
                            CezaBitisGunu = new DateTime(2024, 4, 12, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8185),
                            CezaGunu = new DateTime(2024, 4, 2, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8184),
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            CezaAktifMi = false,
                            CezaBitisGunu = new DateTime(2024, 3, 13, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8188),
                            CezaGunu = new DateTime(2024, 3, 3, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8187),
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            CezaAktifMi = true,
                            CezaBitisGunu = new DateTime(2024, 2, 12, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8191),
                            CezaGunu = new DateTime(2024, 2, 2, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8190),
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            CezaAktifMi = false,
                            CezaBitisGunu = new DateTime(2024, 1, 13, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8194),
                            CezaGunu = new DateTime(2024, 1, 3, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8193),
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            CezaAktifMi = true,
                            CezaBitisGunu = new DateTime(2023, 12, 14, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8197),
                            CezaGunu = new DateTime(2023, 12, 4, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8196),
                            UserId = 11
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.hesapAcmaTalebi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BeklemedeMi")
                        .HasColumnType("boolean");

                    b.Property<bool>("OnaylandiMi")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TalepTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("hesapAcmaTalepleri");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeklemedeMi = false,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 24, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8381),
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            BeklemedeMi = true,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 9, 27, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8384),
                            UserId = 5
                        },
                        new
                        {
                            Id = 3,
                            BeklemedeMi = true,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 9, 21, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8387),
                            UserId = 6
                        },
                        new
                        {
                            Id = 4,
                            BeklemedeMi = false,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 14, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8389),
                            UserId = 7
                        },
                        new
                        {
                            Id = 5,
                            BeklemedeMi = true,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 9, 9, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8391),
                            UserId = 8
                        },
                        new
                        {
                            Id = 6,
                            BeklemedeMi = false,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 4, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8394),
                            UserId = 9
                        },
                        new
                        {
                            Id = 7,
                            BeklemedeMi = true,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 8, 30, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8404),
                            UserId = 10
                        },
                        new
                        {
                            Id = 8,
                            BeklemedeMi = false,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 8, 25, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8407),
                            UserId = 11
                        },
                        new
                        {
                            Id = 9,
                            BeklemedeMi = true,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 8, 20, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8409),
                            UserId = 12
                        },
                        new
                        {
                            Id = 10,
                            BeklemedeMi = false,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 8, 15, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8411),
                            UserId = 13
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.kitap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Isim")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("KitapYayinlandiMi")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("YayinlanmaTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("kitaplar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Isim = "The Art of Coding",
                            KitapYayinlandiMi = true,
                            YayinlanmaTarihi = new DateTime(2023, 9, 30, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8541)
                        },
                        new
                        {
                            Id = 2,
                            Isim = "Mastering Algorithms",
                            KitapYayinlandiMi = false,
                            YayinlanmaTarihi = new DateTime(2024, 9, 29, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8544)
                        },
                        new
                        {
                            Id = 3,
                            Isim = "Clean Code",
                            KitapYayinlandiMi = true,
                            YayinlanmaTarihi = new DateTime(2024, 4, 2, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8546)
                        },
                        new
                        {
                            Id = 4,
                            Isim = "Refactoring",
                            KitapYayinlandiMi = true,
                            YayinlanmaTarihi = new DateTime(2024, 3, 13, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8548)
                        },
                        new
                        {
                            Id = 5,
                            Isim = "Design Patterns",
                            KitapYayinlandiMi = true,
                            YayinlanmaTarihi = new DateTime(2023, 12, 4, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8550)
                        },
                        new
                        {
                            Id = 6,
                            Isim = "Introduction to Algorithms",
                            KitapYayinlandiMi = false,
                            YayinlanmaTarihi = new DateTime(2024, 9, 19, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8552)
                        },
                        new
                        {
                            Id = 7,
                            Isim = "Data Structures and Algorithms",
                            KitapYayinlandiMi = true,
                            YayinlanmaTarihi = new DateTime(2023, 9, 30, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8554)
                        },
                        new
                        {
                            Id = 8,
                            Isim = "Agile Software Development",
                            KitapYayinlandiMi = false,
                            YayinlanmaTarihi = new DateTime(2024, 9, 29, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8556)
                        },
                        new
                        {
                            Id = 9,
                            Isim = "The Pragmatic Programmer",
                            KitapYayinlandiMi = true,
                            YayinlanmaTarihi = new DateTime(2024, 3, 13, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8558)
                        },
                        new
                        {
                            Id = 10,
                            Isim = "Effective Java",
                            KitapYayinlandiMi = true,
                            YayinlanmaTarihi = new DateTime(2024, 1, 23, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8560)
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.kitapOdunc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BeklemedeMi")
                        .HasColumnType("boolean");

                    b.Property<bool>("DondurulduMu")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DonusTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("KitapId")
                        .HasColumnType("integer");

                    b.Property<bool>("OnaylandiMi")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TalepTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KitapId");

                    b.HasIndex("UserId");

                    b.ToTable("kitapOduncler");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeklemedeMi = false,
                            DondurulduMu = false,
                            DonusTarihi = new DateTime(2024, 10, 6, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8610),
                            KitapId = 1,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 22, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8609),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            BeklemedeMi = true,
                            DondurulduMu = false,
                            DonusTarihi = new DateTime(2024, 10, 9, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8615),
                            KitapId = 2,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 9, 19, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8614),
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            BeklemedeMi = false,
                            DondurulduMu = true,
                            DonusTarihi = new DateTime(2024, 10, 11, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8619),
                            KitapId = 3,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 17, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8618),
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            BeklemedeMi = true,
                            DondurulduMu = false,
                            DonusTarihi = new DateTime(2024, 10, 14, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8622),
                            KitapId = 4,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 9, 14, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8621),
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            BeklemedeMi = false,
                            DondurulduMu = false,
                            DonusTarihi = new DateTime(2024, 10, 17, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8626),
                            KitapId = 5,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 11, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8625),
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            BeklemedeMi = true,
                            DondurulduMu = false,
                            DonusTarihi = new DateTime(2024, 10, 19, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8630),
                            KitapId = 6,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 9, 9, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8629),
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            BeklemedeMi = false,
                            DondurulduMu = false,
                            DonusTarihi = new DateTime(2024, 10, 21, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8633),
                            KitapId = 7,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 7, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8632),
                            UserId = 8
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.kitapYayinTalebi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BeklemedeMi")
                        .HasColumnType("boolean");

                    b.Property<int>("KitapId")
                        .HasColumnType("integer");

                    b.Property<bool>("OnaylandiMi")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TalepTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("YazarId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KitapId");

                    b.HasIndex("YazarId");

                    b.ToTable("kitapYayinTalepleri");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeklemedeMi = false,
                            KitapId = 1,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 26, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8677),
                            YazarId = 1
                        },
                        new
                        {
                            Id = 2,
                            BeklemedeMi = true,
                            KitapId = 2,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 9, 23, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8680),
                            YazarId = 2
                        },
                        new
                        {
                            Id = 3,
                            BeklemedeMi = true,
                            KitapId = 3,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 9, 20, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8683),
                            YazarId = 1
                        },
                        new
                        {
                            Id = 4,
                            BeklemedeMi = false,
                            KitapId = 4,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 17, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8686),
                            YazarId = 3
                        },
                        new
                        {
                            Id = 5,
                            BeklemedeMi = true,
                            KitapId = 5,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 9, 14, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8688),
                            YazarId = 2
                        },
                        new
                        {
                            Id = 6,
                            BeklemedeMi = true,
                            KitapId = 6,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 9, 11, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8691),
                            YazarId = 1
                        },
                        new
                        {
                            Id = 7,
                            BeklemedeMi = false,
                            KitapId = 7,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 8, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8693),
                            YazarId = 4
                        },
                        new
                        {
                            Id = 8,
                            BeklemedeMi = true,
                            KitapId = 8,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 9, 5, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8695),
                            YazarId = 3
                        },
                        new
                        {
                            Id = 9,
                            BeklemedeMi = false,
                            KitapId = 9,
                            OnaylandiMi = true,
                            TalepTarihi = new DateTime(2024, 9, 2, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8698),
                            YazarId = 2
                        },
                        new
                        {
                            Id = 10,
                            BeklemedeMi = true,
                            KitapId = 10,
                            OnaylandiMi = false,
                            TalepTarihi = new DateTime(2024, 8, 30, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8700),
                            YazarId = 1
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.kitapYazari", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("KitapId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KitapId");

                    b.HasIndex("UserId");

                    b.ToTable("kitapYazarlari");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            KitapId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            KitapId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            KitapId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            KitapId = 4,
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            KitapId = 5,
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            KitapId = 6,
                            UserId = 4
                        },
                        new
                        {
                            Id = 7,
                            KitapId = 7,
                            UserId = 3
                        },
                        new
                        {
                            Id = 8,
                            KitapId = 8,
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            KitapId = 9,
                            UserId = 2
                        },
                        new
                        {
                            Id = 10,
                            KitapId = 10,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.mesaj", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlanId")
                        .HasColumnType("integer");

                    b.Property<int>("GonderenId")
                        .HasColumnType("integer");

                    b.Property<string>("Icerik")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Konu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GonderenId");

                    b.ToTable("mesajlar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlanId = 1,
                            GonderenId = 2,
                            Icerik = "Hello!",
                            Konu = "Greetings"
                        },
                        new
                        {
                            Id = 2,
                            AlanId = 2,
                            GonderenId = 3,
                            Icerik = "How are you?",
                            Konu = "Checking in"
                        },
                        new
                        {
                            Id = 3,
                            AlanId = 3,
                            GonderenId = 4,
                            Icerik = "Don't forget our meeting.",
                            Konu = "Reminder"
                        },
                        new
                        {
                            Id = 4,
                            AlanId = 4,
                            GonderenId = 1,
                            Icerik = "Thanks for the book!",
                            Konu = "Appreciation"
                        },
                        new
                        {
                            Id = 5,
                            AlanId = 5,
                            GonderenId = 6,
                            Icerik = "Can you send me the details?",
                            Konu = "Request"
                        },
                        new
                        {
                            Id = 6,
                            AlanId = 6,
                            GonderenId = 7,
                            Icerik = "Let's catch up soon.",
                            Konu = "Catch up"
                        },
                        new
                        {
                            Id = 7,
                            AlanId = 7,
                            GonderenId = 8,
                            Icerik = "See you at the conference!",
                            Konu = "Conference"
                        },
                        new
                        {
                            Id = 8,
                            AlanId = 8,
                            GonderenId = 9,
                            Icerik = "I need your input on the project.",
                            Konu = "Project"
                        },
                        new
                        {
                            Id = 9,
                            AlanId = 9,
                            GonderenId = 10,
                            Icerik = "It was great meeting you!",
                            Konu = "Meeting"
                        },
                        new
                        {
                            Id = 10,
                            AlanId = 10,
                            GonderenId = 11,
                            Icerik = "Welcome to the team!",
                            Konu = "Introduction"
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.puan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("KazanilanPuan")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PuanGunu")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("puanlar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            KazanilanPuan = 1000,
                            PuanGunu = new DateTime(2024, 9, 28, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8844),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            KazanilanPuan = 2000,
                            PuanGunu = new DateTime(2024, 9, 27, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8847),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            KazanilanPuan = 1500,
                            PuanGunu = new DateTime(2024, 9, 26, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8849),
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            KazanilanPuan = 2500,
                            PuanGunu = new DateTime(2024, 9, 25, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8851),
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            KazanilanPuan = 3000,
                            PuanGunu = new DateTime(2024, 9, 24, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8853),
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            KazanilanPuan = 3500,
                            PuanGunu = new DateTime(2024, 9, 23, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8855),
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            KazanilanPuan = 4000,
                            PuanGunu = new DateTime(2024, 9, 22, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8857),
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            KazanilanPuan = 4500,
                            PuanGunu = new DateTime(2024, 9, 21, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8859),
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            KazanilanPuan = 5000,
                            PuanGunu = new DateTime(2024, 9, 20, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8861),
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            KazanilanPuan = 5500,
                            PuanGunu = new DateTime(2024, 9, 19, 13, 27, 17, 586, DateTimeKind.Utc).AddTicks(8862),
                            UserId = 10
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RolIsmi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("roller");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RolIsmi = "uye"
                        },
                        new
                        {
                            Id = 2,
                            RolIsmi = "yazar"
                        },
                        new
                        {
                            Id = 3,
                            RolIsmi = "gorevli"
                        },
                        new
                        {
                            Id = 4,
                            RolIsmi = "yonetici"
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.sayfa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Icerik")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("KitapId")
                        .HasColumnType("integer");

                    b.Property<int>("SayfaNo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KitapId");

                    b.ToTable("sayfalar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Icerik = "Ana Sayfa",
                            KitapId = 1,
                            SayfaNo = 1
                        },
                        new
                        {
                            Id = 2,
                            Icerik = "Kitaplar",
                            KitapId = 1,
                            SayfaNo = 2
                        },
                        new
                        {
                            Id = 3,
                            Icerik = "Kullanıcılar",
                            KitapId = 1,
                            SayfaNo = 3
                        },
                        new
                        {
                            Id = 4,
                            Icerik = "Yazarlar",
                            KitapId = 1,
                            SayfaNo = 4
                        },
                        new
                        {
                            Id = 5,
                            Icerik = "Ödünç Alma",
                            KitapId = 1,
                            SayfaNo = 5
                        },
                        new
                        {
                            Id = 6,
                            Icerik = "Mesajlar",
                            KitapId = 1,
                            SayfaNo = 6
                        },
                        new
                        {
                            Id = 7,
                            Icerik = "Ayarlar",
                            KitapId = 1,
                            SayfaNo = 7
                        },
                        new
                        {
                            Id = 8,
                            Icerik = "Yardım",
                            KitapId = 1,
                            SayfaNo = 8
                        },
                        new
                        {
                            Id = 9,
                            Icerik = "Hesap Yönetimi",
                            KitapId = 1,
                            SayfaNo = 9
                        },
                        new
                        {
                            Id = 10,
                            Icerik = "Çıkış",
                            KitapId = 1,
                            SayfaNo = 10
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.user", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Isim")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RolId")
                        .HasColumnType("integer");

                    b.Property<string>("SoyIsim")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ahmet.yilmaz@example.com",
                            Isim = "Ahmet",
                            Password = "$2a$11$XZCw9Xvm3tT57To1IOAyKe/10WcndvmrOdewzuFs487UgIuNYaOq.",
                            RolId = 1,
                            SoyIsim = "Yılmaz"
                        },
                        new
                        {
                            Id = 2,
                            Email = "mehmet.kara@example.com",
                            Isim = "Mehmet",
                            Password = "$2a$11$195Z9mbqWHMh67dOXLCBEOCYBVW43Amg4wSElF9pAdLUil8.YIC7u",
                            RolId = 1,
                            SoyIsim = "Kara"
                        },
                        new
                        {
                            Id = 3,
                            Email = "ayse.celik@example.com",
                            Isim = "Ayşe",
                            Password = "$2a$11$oNv2X2YC47uQTnItKDTqPeh2p03L0p8MC4Rq8atVsvfDXI6pzYlzm",
                            RolId = 2,
                            SoyIsim = "Çelik"
                        },
                        new
                        {
                            Id = 4,
                            Email = "fatma.koc@example.com",
                            Isim = "Fatma",
                            Password = "$2a$11$UmpxWT6dmkrHnZmjAgf5Iunmq5Z6iAesFfxHwSB4xQVN1AQuDHhDS",
                            RolId = 1,
                            SoyIsim = "Koç"
                        },
                        new
                        {
                            Id = 5,
                            Email = "emre.demir@example.com",
                            Isim = "Emre",
                            Password = "$2a$11$cRgePI7jeKdDv2uVyNF59.dmSYjOdjaeivwsLCk38KxyneXhlQZJm",
                            RolId = 1,
                            SoyIsim = "Demir"
                        },
                        new
                        {
                            Id = 6,
                            Email = "seda.aydin@example.com",
                            Isim = "Seda",
                            Password = "$2a$11$O8b/nnXyosn2.4jt7tEUOOpkp7fJFAs3Ud8Au/uGVjez9vrpZwJii",
                            RolId = 2,
                            SoyIsim = "Aydın"
                        },
                        new
                        {
                            Id = 7,
                            Email = "oguz.polat@example.com",
                            Isim = "Oğuz",
                            Password = "$2a$11$3MYXzyhkwNqQwuOzK/J7gO0ro6Lji.nBNpuZSHAVem8mBWkZsgD4m",
                            RolId = 1,
                            SoyIsim = "Polat"
                        },
                        new
                        {
                            Id = 8,
                            Email = "zeynep.gunes@example.com",
                            Isim = "Zeynep",
                            Password = "$2a$11$QI7nnjWVhuYR/eQegKKD3OX/tNDhjPEao.qHAmhY3NJsotW52PVEO",
                            RolId = 1,
                            SoyIsim = "Güneş"
                        },
                        new
                        {
                            Id = 9,
                            Email = "can.arslan@example.com",
                            Isim = "Can",
                            Password = "$2a$11$sMsAs7EX5BVpYyV6MOONfOPTrfRiNj1SQ7Cgz1jmTN8lyyrLWmADG",
                            RolId = 2,
                            SoyIsim = "Arslan"
                        },
                        new
                        {
                            Id = 10,
                            Email = "merve.sonmez@example.com",
                            Isim = "Merve",
                            Password = "$2a$11$5Z3JCvmGIMkKgBxEvDhMaOvISbIWsfovMXtsYj5ZRNvYW3/Y8Ut9q",
                            RolId = 1,
                            SoyIsim = "Sönmez"
                        },
                        new
                        {
                            Id = 11,
                            Email = "ali.ak@example.com",
                            Isim = "Ali",
                            Password = "$2a$11$yQR8gL4LT82B1hxeG22YDOJKof4Od6QN.94/s1.7KIlLskjXWDYaq",
                            RolId = 1,
                            SoyIsim = "Ak"
                        },
                        new
                        {
                            Id = 12,
                            Email = "berk.ozturk@example.com",
                            Isim = "Berk",
                            Password = "$2a$11$OVR2B9mN2umUdrKqaz8u4.DJ1E2ulchwGzNzFFWZ7ulziFDf35WJq",
                            RolId = 1,
                            SoyIsim = "Öztürk"
                        },
                        new
                        {
                            Id = 13,
                            Email = "ayla.yalcin@example.com",
                            Isim = "Ayla",
                            Password = "$2a$11$Z/jWMlPBd3Xs.cxyoLfWL.uwhc6MzWFXJdY/isk/oaNQzEM6IjYPG",
                            RolId = 2,
                            SoyIsim = "Yalçın"
                        },
                        new
                        {
                            Id = 14,
                            Email = "emine.cinar@example.com",
                            Isim = "Emine",
                            Password = "$2a$11$n4Vug7vfeCMur3Zb6ywoQ.xl087T.ikmsFa3nbPVSlJBfAKobcptG",
                            RolId = 1,
                            SoyIsim = "Çınar"
                        },
                        new
                        {
                            Id = 15,
                            Email = "serdar.toprak@example.com",
                            Isim = "Serdar",
                            Password = "$2a$11$ubNgBu.qGdN3Z4A683R3G.HdMfJ6tbhmfbPZJ9aheKpY99thqzExC",
                            RolId = 1,
                            SoyIsim = "Toprak"
                        },
                        new
                        {
                            Id = 16,
                            Email = "yonetici@example.com",
                            Isim = "Türker",
                            Password = "$2a$11$DUmvI5bYqfunQIUhqxpACOA7zsMufnHP5YzuwiUsCAhhIvxbdwCzi",
                            RolId = 4,
                            SoyIsim = "Kıvılcım"
                        },
                        new
                        {
                            Id = 17,
                            Email = "gorevli@example.com",
                            Isim = "Melek",
                            Password = "$2a$11$5ZtMyd/y5rqpsfhgA6diu.0mBk1gBsDfL/RyfSDslG3S/XhH/V6iK",
                            RolId = 3,
                            SoyIsim = "Altun"
                        },
                        new
                        {
                            Id = 18,
                            Email = "yazar@example.com",
                            Isim = "Ebrar",
                            Password = "$2a$11$73bgsHJnpkzXHI3XpGOpZuj64p6MFkS6DPuHSTQ8SoYxDRmKmw2Nq",
                            RolId = 2,
                            SoyIsim = "Saygılı"
                        },
                        new
                        {
                            Id = 19,
                            Email = "uye@example.com",
                            Isim = "Zehra",
                            Password = "$2a$11$9eiCC3IECQauLG5pS4fpfu0wwykacWKKXJjQjw9S7b3rAQ8iODnEK",
                            RolId = 1,
                            SoyIsim = "Akdemir"
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.kitapOdunc", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.kitap", "kitap")
                        .WithMany("kitapOduncIstekleri")
                        .HasForeignKey("KitapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("libraryApp.backend.Entity.user", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("kitap");

                    b.Navigation("user");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.kitapYayinTalebi", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.kitap", "kitap")
                        .WithMany("kitapYayinTalepleri")
                        .HasForeignKey("KitapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("libraryApp.backend.Entity.user", "yazar")
                        .WithMany()
                        .HasForeignKey("YazarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("kitap");

                    b.Navigation("yazar");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.kitapYazari", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.kitap", "kitap")
                        .WithMany("kitapYazarlari")
                        .HasForeignKey("KitapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("libraryApp.backend.Entity.user", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("kitap");

                    b.Navigation("user");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.mesaj", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.user", "gonderen")
                        .WithMany()
                        .HasForeignKey("GonderenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("gonderen");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.sayfa", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.kitap", null)
                        .WithMany("sayfalar")
                        .HasForeignKey("KitapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("libraryApp.backend.Entity.user", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.rol", "rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("rol");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.kitap", b =>
                {
                    b.Navigation("kitapOduncIstekleri");

                    b.Navigation("kitapYayinTalepleri");

                    b.Navigation("kitapYazarlari");

                    b.Navigation("sayfalar");
                });
#pragma warning restore 612, 618
        }
    }
}
